{"version":3,"sources":["webpack:///./src/components/Pagination/styled.js","webpack:///./src/components/Pagination/index.js","webpack:///./src/templates/posts-list.js"],"names":["PaginationWrapper","styled","ul","media","lessThan","Pagination","isFirst","isLast","currentPage","numPages","prevPage","nextPage","useTranslations","next","prev","of","LocalizedLink","to","Blog","props","postList","data","allMarkdownRemark","edges","pageContext","title","TitlePage","text","map","node","frontmatter","background","category","date","description","image","timeToRead","slug","fields","PostItem","key"],"mappings":"gOAGaA,EAAoBC,IAAOC,GAAV,gFAAGD,CAAH,mQAQ1BE,IAAMC,SAAS,QAAfD,CAR0B,mDC0CfE,EAtCI,SAAC,GAOb,IANLC,EAMI,EANJA,QACAC,EAKI,EALJA,OACAC,EAII,EAJJA,YACAC,EAGI,EAHJA,SACAC,EAEI,EAFJA,SACAC,EACI,EADJA,SAEA,EAA2BC,cAAnBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,KAAMC,EAApB,EAAoBA,GAEpB,OACE,kBAAC,EAAD,KACE,6BACIT,GACA,kBAACU,EAAA,EAAD,CAAeC,GAAIP,GAAnB,KAAgCI,IAGpC,2BACGN,EADH,IACiBO,EADjB,IACsBN,GAEtB,6BACIF,GACA,kBAACS,EAAA,EAAD,CAAeC,GAAIN,GAAWE,EAA9B,S,YCyEKK,UA5FF,SAAAC,GACX,IAAMC,EAAWD,EAAME,KAAKC,kBAAkBC,MAG9C,EAAkCJ,EAAMK,YAAhChB,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,SACfH,EAA0B,IAAhBE,EACVD,EAASC,IAAgBC,EACzBC,EACJF,EAAc,GAAM,EAAI,QAAxB,UAA2CA,EAAc,GACrDG,EAAQ,eAAiBH,EAAc,GAE7C,OACE,oCACE,kBAAC,IAAD,CAAKiB,MAAM,SACX,kBAACC,EAAA,EAAD,CAAWC,KAAK,SAEhB,kBAAC,IAAD,KACGP,EAASQ,KACR,oBACEC,KADF,IAEIC,YACEC,EAHN,EAGMA,WACAC,EAJN,EAIMA,SACAC,EALN,EAKMA,KACAC,EANN,EAMMA,YACAT,EAPN,EAOMA,MACAU,EARN,EAQMA,MAEFC,EAVJ,EAUIA,WACUC,EAXd,EAWIC,OAAUD,KAXd,OAcE,kBAACE,EAAA,EAAD,CACEF,KAAI,SAAWA,EACfN,WAAYA,EACZC,SAAUA,EACVC,KAAMA,EACNG,WAAYA,EACZX,MAAOA,EACPS,YAAaA,EACbC,MAAOA,EACPK,IAAKH,QAMb,kBAAC,EAAD,CACE/B,QAASA,EACTC,OAAQA,EACRC,YAAaA,EACbC,SAAUA,EACVC,SAAUA,EACVC,SAAUA","file":"component---src-templates-posts-list-js-7d0fd5932b109149dc6e.js","sourcesContent":["import styled from 'styled-components';\r\nimport media from 'styled-media-query';\r\n\r\nexport const PaginationWrapper = styled.ul`\r\n  align-items: center;\r\n  border-top: 1px solid var(--borders);\r\n  color: var(--texts);\r\n  display: flex;\r\n  padding: 1.5rem 3rem;\r\n  justify-content: space-between;\r\n  list-style: none;\r\n  ${media.lessThan('large')`\r\n    padding: 1rem;\r\n  `}\r\n\r\n  a {\r\n    color: var(--texts);\r\n    text-decoration: none;\r\n    transition: color 0.5s;\r\n    &:hover {\r\n      color: var(--highlight);\r\n    }\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport propTypes from 'prop-types';\r\nimport LocalizedLink from '../LocalizedLink';\r\nimport useTranslations from '../useTranslations';\r\n\r\nimport * as S from './styled';\r\n\r\nconst Pagination = ({\r\n  isFirst,\r\n  isLast,\r\n  currentPage,\r\n  numPages,\r\n  prevPage,\r\n  nextPage,\r\n}) => {\r\n  const { next, prev, of } = useTranslations();\r\n\r\n  return (\r\n    <S.PaginationWrapper>\r\n      <li>\r\n        {!isFirst && (\r\n          <LocalizedLink to={prevPage}>← {prev}</LocalizedLink>\r\n        )}\r\n      </li>\r\n      <p>\r\n        {currentPage} {of} {numPages}\r\n      </p>\r\n      <li>\r\n        {!isLast && (\r\n          <LocalizedLink to={nextPage}>{next} →</LocalizedLink>\r\n        )}\r\n      </li>\r\n    </S.PaginationWrapper>\r\n  );\r\n};\r\n\r\nPagination.propTypes = {\r\n  isFirst: propTypes.bool.isRequired,\r\n  isLast: propTypes.bool.isRequired,\r\n  currentPage: propTypes.number.isRequired,\r\n  numPages: propTypes.number.isRequired,\r\n  prevPage: propTypes.string,\r\n  nextPage: propTypes.string,\r\n};\r\n\r\nexport default Pagination;\r\n","import React from 'react';\r\nimport { graphql } from 'gatsby';\r\nimport PostItem from '../components/PostItem';\r\nimport TitlePage from '../components/TitlePage';\r\nimport SEO from '../components/seo';\r\n\r\nimport Pagination from '../components/Pagination';\r\n\r\nimport * as S from '../components/ListWrapper/styled';\r\n\r\nconst Blog = props => {\r\n  const postList = props.data.allMarkdownRemark.edges;\r\n\r\n  // Logic for Pagination Component\r\n  const { currentPage, numPages } = props.pageContext;\r\n  const isFirst = currentPage === 1;\r\n  const isLast = currentPage === numPages;\r\n  const prevPage =\r\n    currentPage - 1 === 1 ? '/blog' : `/blog/${currentPage - 1}`;\r\n  const nextPage = `/blog/page/${currentPage + 1}`;\r\n\r\n  return (\r\n    <>\r\n      <SEO title=\"Blog\" />\r\n      <TitlePage text=\"Blog\" />\r\n\r\n      <S.ListWrapper>\r\n        {postList.map(\r\n          ({\r\n            node: {\r\n              frontmatter: {\r\n                background,\r\n                category,\r\n                date,\r\n                description,\r\n                title,\r\n                image,\r\n              },\r\n              timeToRead,\r\n              fields: { slug },\r\n            },\r\n          }) => (\r\n            <PostItem\r\n              slug={`/blog/${slug}`}\r\n              background={background}\r\n              category={category}\r\n              date={date}\r\n              timeToRead={timeToRead}\r\n              title={title}\r\n              description={description}\r\n              image={image}\r\n              key={slug}\r\n            />\r\n          ),\r\n        )}\r\n      </S.ListWrapper>\r\n\r\n      <Pagination\r\n        isFirst={isFirst}\r\n        isLast={isLast}\r\n        currentPage={currentPage}\r\n        numPages={numPages}\r\n        prevPage={prevPage}\r\n        nextPage={nextPage}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport const query = graphql`\r\n  query PostsList($locale: String!, $dateFormat: String!, $skip: Int!, $limit: Int!) {\r\n    allMarkdownRemark(\r\n      sort: {fields: frontmatter___date, order: DESC}, \r\n      filter: { \r\n        fields: { locale: { eq: $locale } } \r\n        fileAbsolutePath: {regex: \"/(blog)\\/.*\\\\.md$/\"}\r\n      }\r\n      limit: $limit\r\n      skip: $skip\r\n    ){\r\n      edges {\r\n        node {\r\n          frontmatter {\r\n            title\r\n            description\r\n            category\r\n            background\r\n            image\r\n            date(formatString: $dateFormat)\r\n\r\n          }\r\n          timeToRead\r\n          fields {\r\n            locale\r\n            slug\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default Blog;\r\n"],"sourceRoot":""}